app "GitIngest Desktop" {
    window {
        title: "GitIngest - Transform repositories into LLM-digestible text"
        width: 1200
        height: 800
        centered: true
        resizable: true
        minWidth: 800
        minHeight: 600
    }
    
    state {
        currentTab: "summary"
        repoUrl: ""
        includePattern: ""
        excludePattern: ""
        isProcessing: false
        outputContent: {
            summary: "",
            structure: "",
            contents: ""
        }
        selectedExample: null
    }
    
    style {
        primaryColor: "#4F46E5"
        secondaryColor: "#F59E0B"
        bgColor: "#F9FAFB"
        textColor: "#1F2937"
        successColor: "#10B981"
        cardBg: "#FFFFFF"
        borderRadius: "8px"
        shadow: "0 4px 6px rgba(0, 0, 0, 0.1)"
    }
    
    layout {
        type: "vertical"
        padding: 0
        spacing: 0
        
        import "components/header.ppk" as Header
        import "components/input_form.ppk" as InputForm
        import "components/tabs.ppk" as Tabs
        import "components/output_display.ppk" as OutputDisplay
        import "components/feature_cards.ppk" as FeatureCards
        import "components/examples.ppk" as Examples
        
        Header()
        
        container {
            padding: 20
            backgroundColor: style.bgColor
            
            InputForm(
                url: bind(state.repoUrl),
                includePattern: bind(state.includePattern),
                excludePattern: bind(state.excludePattern),
                isProcessing: bind(state.isProcessing),
                onProcess: processRepository
            )
            
            Examples(
                onSelect: loadExample
            )
            
            Tabs(
                activeTab: bind(state.currentTab),
                onTabChange: switchTab
            )
            
            OutputDisplay(
                content: getActiveContent(),
                isProcessing: state.isProcessing
            )
            
            FeatureCards()
        }
    }
    
    functions {
        processRepository() {
            state.isProcessing = true
            
            timeout(2000) {
                let mockData = generateMockData(state.repoUrl)
                state.outputContent.summary = mockData.summary
                state.outputContent.structure = mockData.structure
                state.outputContent.contents = mockData.contents
                state.isProcessing = false
            }
        }
        
        switchTab(tabName) {
            state.currentTab = tabName
        }
        
        getActiveContent() {
            switch(state.currentTab) {
                case "summary":
                    return state.outputContent.summary
                case "structure":
                    return state.outputContent.structure
                case "contents":
                    return state.outputContent.contents
                default:
                    return ""
            }
        }
        
        loadExample(example) {
            state.repoUrl = example.url
            state.outputContent.summary = example.summary
            state.outputContent.structure = example.structure
            state.outputContent.contents = example.contents
            state.selectedExample = example.name
        }
        
        generateMockData(url) {
            let repoName = extractRepoName(url)
            
            return {
                summary: `# Repository: ${repoName}
                
## Overview
This repository has been successfully processed by GitIngest.

## Statistics
- Total Files: 127
- Total Lines: 15,432
- Primary Language: JavaScript
- Size: 2.3 MB

## Key Features
- Modern web application
- Clean architecture
- Well-documented code
- Active development

## Dependencies
- React 18.x
- TypeScript 5.x
- Vite 4.x
- ESLint & Prettier configured`,
                
                structure: `${repoName}/
├── src/
│   ├── components/
│   │   ├── Header.tsx
│   │   ├── Footer.tsx
│   │   └── Layout.tsx
│   ├── pages/
│   │   ├── Home.tsx
│   │   ├── About.tsx
│   │   └── Contact.tsx
│   ├── utils/
│   │   ├── api.ts
│   │   └── helpers.ts
│   ├── App.tsx
│   └── main.tsx
├── public/
│   └── assets/
├── tests/
│   └── unit/
├── package.json
├── tsconfig.json
├── vite.config.ts
└── README.md`,
                
                contents: `// File: src/App.tsx
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Layout from './components/Layout';
import Home from './pages/Home';
import About from './pages/About';

function App() {
    return (
        <BrowserRouter>
            <Layout>
                <Routes>
                    <Route path="/" element={<Home />} />
                    <Route path="/about" element={<About />} />
                </Routes>
            </Layout>
        </BrowserRouter>
    );
}

export default App;

// File: src/main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>
);

// ... Additional file contents would continue here ...`
            }
        }
        
        extractRepoName(url) {
            if (!url) return "repository"
            let parts = url.split("/")
            return parts[parts.length - 1] || parts[parts.length - 2] || "repository"
        }
    }
}