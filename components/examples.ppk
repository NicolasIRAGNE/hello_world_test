component Examples(props) {
    let examples = [
        {
            name: "FastAPI",
            url: "https://github.com/tiangolo/fastapi",
            icon: "⚡",
            description: "Modern web framework",
            summary: `# FastAPI Repository Summary

FastAPI is a modern, fast (high-performance) web framework for building APIs with Python 3.7+ based on standard Python type hints.

## Key Features
- Fast: Very high performance, on par with NodeJS and Go
- Fast to code: Increase development speed by 200-300%
- Fewer bugs: Reduce human errors by 40%
- Intuitive: Great editor support with completion everywhere
- Easy: Designed to be easy to use and learn
- Short: Minimize code duplication
- Robust: Production-ready code with automatic documentation

## Statistics
- Files: 523
- Lines of Code: 47,892
- Primary Language: Python
- Contributors: 450+`,
            structure: `fastapi/
├── fastapi/
│   ├── __init__.py
│   ├── applications.py
│   ├── background.py
│   ├── concurrency.py
│   ├── datastructures.py
│   ├── dependencies/
│   │   ├── __init__.py
│   │   ├── models.py
│   │   └── utils.py
│   ├── encoders.py
│   ├── exceptions.py
│   ├── middleware/
│   ├── param_functions.py
│   ├── params.py
│   ├── requests.py
│   ├── responses.py
│   ├── routing.py
│   ├── security/
│   ├── staticfiles.py
│   ├── templating.py
│   ├── testclient.py
│   ├── types.py
│   ├── utils.py
│   └── websockets.py
├── docs/
├── tests/
├── pyproject.toml
└── README.md`,
            contents: `# File: fastapi/__init__.py
"""FastAPI framework, high performance, easy to learn, fast to code, ready for production"""

__version__ = "0.104.1"

from starlette import status as status

from .applications import FastAPI as FastAPI
from .background import BackgroundTasks as BackgroundTasks
from .datastructures import UploadFile as UploadFile
from .exceptions import HTTPException as HTTPException
from .param_functions import Body as Body
from .param_functions import Cookie as Cookie
from .param_functions import Depends as Depends
from .param_functions import File as File
from .param_functions import Form as Form
from .param_functions import Header as Header
from .param_functions import Path as Path
from .param_functions import Query as Query
from .param_functions import Security as Security
from .requests import Request as Request
from .responses import Response as Response
from .routing import APIRouter as APIRouter
from .websockets import WebSocket as WebSocket

# Continue with more file contents...`
        },
        {
            name: "Flask",
            url: "https://github.com/pallets/flask",
            icon: "🌶️",
            description: "Micro web framework",
            summary: `# Flask Repository Summary

Flask is a lightweight WSGI web application framework designed to make getting started quick and easy.

## Key Features
- Lightweight and modular design
- Built-in development server and debugger
- RESTful request dispatching
- Jinja2 templating
- Secure cookies support
- 100% WSGI 1.0 compliant
- Unicode-based

## Statistics
- Files: 312
- Lines of Code: 28,456
- Primary Language: Python
- Stars: 65k+`,
            structure: `flask/
├── src/flask/
│   ├── __init__.py
│   ├── app.py
│   ├── blueprints.py
│   ├── cli.py
│   ├── config.py
│   ├── ctx.py
│   ├── debughelpers.py
│   ├── globals.py
│   ├── helpers.py
│   ├── json/
│   ├── logging.py
│   ├── sessions.py
│   ├── signals.py
│   ├── templating.py
│   ├── testing.py
│   ├── views.py
│   └── wrappers.py
├── docs/
├── examples/
├── tests/
└── setup.py`,
            contents: `# File: src/flask/__init__.py
"""
Flask
~~~~~

A microframework based on Werkzeug and Jinja2.

:copyright: 2010 Pallets
:license: BSD-3-Clause
"""

__version__ = "3.0.0"

from .app import Flask
from .blueprints import Blueprint
from .config import Config
from .globals import current_app
from .globals import g
from .globals import request
from .globals import session
from .helpers import abort
from .helpers import flash
from .helpers import get_flashed_messages
from .helpers import make_response
from .helpers import redirect
from .helpers import send_file
from .helpers import send_from_directory
from .helpers import url_for
from .json import jsonify
from .signals import signals_available
from .templating import render_template
from .templating import render_template_string

# More file contents...`
        },
        {
            name: "Excalidraw",
            url: "https://github.com/excalidraw/excalidraw",
            icon: "✏️",
            description: "Virtual whiteboard",
            summary: `# Excalidraw Repository Summary

Excalidraw is a virtual collaborative whiteboard tool that lets you easily sketch diagrams with a hand-drawn feel.

## Key Features
- Infinite canvas-based whiteboard
- Hand-drawn style diagrams
- Real-time collaboration
- End-to-end encryption
- Export to various formats
- Dark mode support
- Mobile responsive

## Statistics
- Files: 892
- Lines of Code: 125,340
- Primary Language: TypeScript
- Contributors: 300+`,
            structure: `excalidraw/
├── packages/
│   ├── excalidraw/
│   │   ├── actions/
│   │   ├── components/
│   │   ├── element/
│   │   ├── scene/
│   │   ├── utils/
│   │   └── index.tsx
│   └── utils/
├── public/
├── src/
│   ├── actions/
│   ├── components/
│   ├── css/
│   ├── data/
│   ├── hooks/
│   ├── locales/
│   ├── packages/
│   ├── tests/
│   └── index.tsx
├── package.json
├── tsconfig.json
└── README.md`,
            contents: `// File: src/index.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import { App } from "./App";
import "./css/app.scss";
import "./css/styles.scss";
import { registerSW } from "virtual:pwa-register";

const root = ReactDOM.createRoot(document.getElementById("root")!);

root.render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>
);

// Register service worker
if ("serviceWorker" in navigator) {
  registerSW();
}

// More file contents...`
        }
    ]
    
    container {
        marginBottom: 20
        
        column {
            spacing: 10
            
            text {
                content: "Try Example Repositories"
                fontSize: 14
                fontWeight: "600"
                color: "#374151"
            }
            
            row {
                spacing: 10
                
                for (example in examples) {
                    button {
                        padding: "8 16"
                        backgroundColor: "#F3F4F6"
                        border: "1px solid #D1D5DB"
                        borderRadius: 6
                        cursor: "pointer"
                        
                        row {
                            spacing: 8
                            alignment: "center"
                            
                            text {
                                content: example.icon
                                fontSize: 16
                            }
                            
                            column {
                                spacing: 2
                                
                                text {
                                    content: example.name
                                    fontSize: 13
                                    fontWeight: "600"
                                    color: "#1F2937"
                                }
                                
                                text {
                                    content: example.description
                                    fontSize: 11
                                    color: "#6B7280"
                                }
                            }
                        }
                        
                        onClick: () => props.onSelect(example)
                        
                        onHover: {
                            backgroundColor: "#E5E7EB"
                            border: "1px solid #9CA3AF"
                        }
                    }
                }
            }
        }
    }
}